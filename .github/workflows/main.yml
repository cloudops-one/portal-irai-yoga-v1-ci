name: CI/CD Pipeline

permissions:
  actions: read
  contents: read

on:
  push:
    branches: ['**']
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      docker_tag: ${{ steps.tag.outputs.docker_tag }}
      branch_valid: ${{ steps.validation.outputs.valid }}
      domain: ${{ steps.domain.outputs.domain }}
    steps:
      - name: Determine environment and tag
        id: env
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "environment=live" >> $GITHUB_OUTPUT
            TAG="${GITHUB_REF#refs/tags/}"
            echo "docker_tag=$TAG" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "environment=stage" >> $GITHUB_OUTPUT
            echo "docker_tag=stage" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
            echo "docker_tag=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          fi
      - name: Determine domain
        id: domain
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "domain=live-domain-config" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "domain=stage-domain-config" >> $GITHUB_OUTPUT
          else
            echo "domain=preview-domain-config" >> $GITHUB_OUTPUT
          fi
      - name: Validate branch name
        id: validation
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          BRANCH_REGEX="^(feat|fix|chore|test|docs|refactor|ci|style|perf|build)/[0-9]{1,5}_[a-z0-9]+(-[a-z0-9]+)*$"
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            if [[ "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-0]+$ ]]; then
              echo "valid=true" >> $GITHUB_OUTPUT
              echo "Tag $TAG_NAME is valid for live deployment"
            else
              echo "valid=false" >> $GITHUB_OUTPUT
              echo "Invalid tag format. Expected: v1.0.0"
              exit 1
            fi
          elif [[ "$BRANCH_NAME" == "main" ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "Main branch is valid for stage deployment"
          elif [[ "$BRANCH_NAME" =~ $BRANCH_REGEX ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "Feature branch $BRANCH_NAME is valid for preview deployment"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "Branch name does not match required pattern"
            exit 1
          fi

  react-build:
    needs: validate-branch
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Setup Node.js (without cache)
        uses: cloudops-one/setup-node@v1
        with:
          node-version: '20'
          # Remove cache parameter to avoid lockfile errors
          
      - name: Generate package-lock.json
        run: npm install --package-lock-only --no-audit --no-fund
          
      - name: Install dependencies
        run: npm install --no-audit --no-fund
        
      - name: Build project
        run: npm run build
        env:
          CI: false

  docker-build-push:
    needs: [validate-branch, react-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      
      - name: Build and push Docker image
        uses: cloudops-one/devops-ci/.github/actions/docker-operations@main
        with:
          operation: "build-push"
          harbor_registry: ${{ secrets.HARBOR_REGISTRY }}
          harbor_username: ${{ secrets.HARBOR_USERNAME }}
          harbor_password: ${{ secrets.HARBOR_PASSWORD }}
          project_name: 'portal-irai-yoga'
          component: 'web-app'
          docker_tag: ${{ needs.validate-branch.outputs.docker_tag }}

  deploy:
    needs: [validate-branch, docker-build-push]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.validate-branch.outputs.environment }}
    steps:
      - name: Setup environment
        uses: cloudops-one/devops-ci/.github/actions/setup-environment@main
        with:
          environment: ${{ needs.validate-branch.outputs.environment }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy to Kubernetes
        uses: cloudops-one/devops-ci/.github/actions/k8s-deploy@main
        with:
          environment: ${{ needs.validate-branch.outputs.environment }}
          project_name: 'portal-irai-yoga'
          component: 'web-app'
          docker_tag: ${{ needs.validate-branch.outputs.docker_tag }}
          kubeconfig: ${{ secrets.KUBECONFIG }}
          domain_config: ${{ needs.validate-branch.outputs.domain }}
          deploy_supporting_services: false

      - name: Determine webhook URL
        id: webhook
        run: |
          if [ "${{ needs.validate-branch.outputs.environment }}" = "preview" ]; then
            echo "webhook_url=${{ secrets.ZOHO_CLIQ_WEBHOOK_PREVIEW }}" >> $GITHUB_OUTPUT
          elif [ "${{ needs.validate-branch.outputs.environment }}" = "stage" ]; then
            echo "webhook_url=${{ secrets.ZOHO_CLIQ_WEBHOOK_STAGE }}" >> $GITHUB_OUTPUT
          else
            echo "webhook_url=${{ secrets.ZOHO_CLIQ_WEBHOOK_LIVE }}" >> $GITHUB_OUTPUT
          fi

      - name: Notify deployment
        uses: cloudops-one/devops-ci/.github/actions/notify@main
        with:
          webhook_url: ${{ steps.webhook.outputs.webhook_url }}
          message: "âœ… Deployment successful to ${{ needs.validate-branch.outputs.environment }}"
          environment: ${{ needs.validate-branch.outputs.environment }}
