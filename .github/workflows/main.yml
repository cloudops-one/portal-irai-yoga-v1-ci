name: CI/CD Pipeline

permissions:
  actions: read
  contents: read

on:
  push:
    branches: ['**']
    tags: ['v*', '*.*.*']
  pull_request:
    branches: [main]

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      docker_tag: ${{ steps.env.outputs.docker_tag }}
      branch_valid: ${{ steps.validation.outputs.valid }}
      domain: ${{ steps.domain.outputs.domain }}
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      # (no change to validation)

  gitleaks-scan:
    needs: validate-branch
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Gitleaks Security Scan
        uses: cloudops-one/devops-ci/.github/actions/gitleaks-scan@main
        with:
          scan-path: '.'
          fail-on-leak: true
          config-path: '.gitleaks.toml'
          redact-secrets: true

  code-coverage:
    needs: gitleaks-scan
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      - name: Run Code Coverage
        uses: cloudops-one/devops-ci/.github/actions/code-coverage@main
        with:
          node-version: '20'

  compile:
    needs: code-coverage
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      - name: Compile application
        run: |
          echo "Running compilation step..."
          echo "Compilation completed successfully"

  react-build:
    needs: compile
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      - name: Build React application
        uses: cloudops-one/devops-ci/.github/actions/build-react@main
        with:
          node-version: '20'
          skip-husky: true
          generate-lockfile: true

  docker-build:
    needs: [validate-branch, react-build, gitleaks-scan]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      - name: Validate Docker tag format
        id: validate-tag
        run: |
          TAG="${{ needs.validate-branch.outputs.docker_tag }}"
          if [ -z "$TAG" ]; then
            echo "❌ Docker tag is empty"
            exit 1
          fi
          if [[ ! "$TAG" =~ ^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,127}$ ]]; then
            echo "❌ Invalid Docker tag format: $TAG"
            exit 1
          else
            echo "✅ Docker tag is valid: $TAG"
          fi
      - name: Set full image tag
        id: set-tag
        run: |
          FULL_IMAGE_TAG="${{ secrets.HARBOR_REGISTRY }}/portal-irai-yoga/admin:${{ needs.validate-branch.outputs.docker_tag }}"
          echo "image_tag=$FULL_IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Build Docker image (NO PUSH)
        run: |
          docker build -t $FULL_IMAGE_TAG .
        env:
          FULL_IMAGE_TAG: ${{ secrets.HARBOR_REGISTRY }}/portal-irai-yoga/admin:${{ needs.validate-branch.outputs.docker_tag }}

  security-scan:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Security scan (Trivy)
        uses: cloudops-one/devops-ci/.github/actions/security-scan@main
        with:
          image-name: ${{ needs.docker-build.outputs.image_tag }}

  snyk-scan:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      - name: Run Snyk Container Scan
        run: |
          npm install -g snyk
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk container test ${{ needs.docker-build.outputs.image_tag }} --severity-threshold=high
          snyk container monitor ${{ needs.docker-build.outputs.image_tag }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  docker-push:
    needs: [docker-build, security-scan, snyk-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      - name: Login to Docker Registry
        run: |
          echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ secrets.HARBOR_REGISTRY }} --username ${{ secrets.HARBOR_USERNAME }} --password-stdin
      - name: Push Docker image (AFTER scans)
        run: |
          docker push ${{ needs.docker-build.outputs.image_tag }}
      - name: Logout from Docker Registry
        run: |
          docker logout ${{ secrets.HARBOR_REGISTRY }}

  deploy:
    needs: [validate-branch, docker-push]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.validate-branch.outputs.environment }}
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      - name: Setup environment
        uses: cloudops-one/devops-ci/.github/actions/setup-environment@main
        with:
          environment: ${{ needs.validate-branch.outputs.environment }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Deploy to Kubernetes
        uses: cloudops-one/devops-ci/.github/actions/k8s-deploy@main
        with:
          environment: ${{ needs.validate-branch.outputs.environment }}
          project-name: 'portal-irai-yoga'
          component: 'admin'
          docker-tag: ${{ needs.validate-branch.outputs.docker_tag }}
          kubeconfig: ${{ secrets.KUBECONFIG }}
          domain-config: ${{ needs.validate-branch.outputs.domain }}
          deploy-supporting-services: false
      - name: Determine webhook URL
        id: webhook
        run: |
          if [ "${{ needs.validate-branch.outputs.environment }}" = "preview" ]; then
            echo "webhook_url=${{ secrets.ZOHO_CLIQ_WEBHOOK_PREVIEW }}" >> $GITHUB_OUTPUT
          elif [ "${{ needs.validate-branch.outputs.environment }}" = "stage" ]; then
            echo "webhook_url=${{ secrets.ZOHO_CLIQ_WEBHOOK_STAGE }}" >> $GITHUB_OUTPUT
          else
            echo "webhook_url=${{ secrets.ZOHO_CLIQ_WEBHOOK_LIVE }}" >> $GITHUB_OUTPUT
          fi
      - name: Notify deployment
        uses: cloudops-one/devops-ci/.github/actions/notify@main
        with:
          webhook-url: ${{ steps.webhook.outputs.webhook_url }}
          message: "✅ Deployment successful to ${{ needs.validate-branch.outputs.environment }}"
          environment: ${{ needs.validate-branch.outputs.environment }}
