name: CI/CD Pipeline

permissions:
  actions: read
  contents: read

on:
  push:
    branches: ['**']
    tags: ['v*', '*.*.*']
  pull_request:
    branches: [main]

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      docker_tag: ${{ steps.env.outputs.docker_tag }}
      branch_valid: ${{ steps.validation.outputs.valid }}
      domain: ${{ steps.domain.outputs.domain }}
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Determine environment and tag
        id: env
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "environment=live" >> $GITHUB_OUTPUT
            TAG="${GITHUB_REF#refs/tags/}"
            echo "docker_tag=$TAG" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "environment=stage" >> $GITHUB_OUTPUT
            echo "docker_tag=stage" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
            echo "docker_tag=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          fi
          
      - name: Determine domain
        id: domain
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "domain=live-domain-config" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "domain=stage-domain-config" >> $GITHUB_OUTPUT
          else
            echo "domain=preview-domain-config" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate branch name and tag
        id: validation
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          BRANCH_REGEX="^(feat|fix|chore|test|docs|refactor|ci|style|perf|build)/[0-9]{1,5}_[a-z0-9]+(-[a-z0-9]+)*$"
          
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            if [[ "$TAG_NAME" =~ ^(v)?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "valid=true" >> $GITHUB_OUTPUT
              echo "Tag $TAG_NAME is valid for live deployment"
            else
              echo "valid=false" >> $GITHUB_OUTPUT
              echo "Invalid tag format. Expected: v1.0.0 or 1.0.0"
              exit 1
            fi
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "Main branch is valid for stage deployment"
          elif [[ "$BRANCH_NAME" =~ $BRANCH_REGEX ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "Feature branch $BRANCH_NAME is valid for preview deployment"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "Branch name does not match required pattern"
            exit 1
          fi

  # Security scanning jobs - run sequentially
  gitleaks-scan:
    needs: validate-branch
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run Gitleaks Security Scan
        uses: cloudops-one/devops-ci/.github/actions/gitleaks-scan@main
        with:
          scan-path: '.'
          fail-on-leak: true
          config-path: '.gitleaks.toml'
          redact-secrets: true

  # Trivy filesystem scan runs after gitleaks-scan completes
  trivy-filesystem-scan:
    needs: [validate-branch, gitleaks-scan]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Run Trivy filesystem scan
        uses: cloudops-one/devops-ci/.github/actions/trivy-scan@main
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret,config'
          ignore-unfixed: 'false'

  # SonarQube code quality scan - centralized approach
  sonarqube-scan:
    needs: [validate-branch, trivy-filesystem-scan]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: cloudops-one/setup-node@v1
        with:
          node-version: '20'

      # Check if package-lock.json exists and choose appropriate install command
      - name: Install dependencies
        run: |
          if [ -f "package-lock.json" ]; then
            echo "Using npm ci (package-lock.json found)"
            npm ci
          else
            echo "Using npm install (no package-lock.json found)"
            npm install
          fi
      - name: Run Centralized SonarQube Scan
        uses: cloudops-one/devops-ci/.github/actions/sonarqube-scan@main
        with:
          sonar-token: ${{ secrets.SONARQUBE_TOKEN }}
          sonar-host-url: ${{ secrets.SONARQUBE_URL }}
          project-key: 'portal-irai-yoga-admin'  # Correct project key
          project-name: 'Portal Irai Yoga Admin'
          docker-tag: ${{ needs.validate-branch.outputs.docker_tag }}
          branch-name: ${{ github.ref_name }}
          sources-path: src
          coverage-path: coverage/lcov.info

  # Development and build jobs
  code-coverage:
    needs: [validate-branch, sonarqube-scan]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Run Code Coverage
        uses: cloudops-one/devops-ci/.github/actions/code-coverage@main
        with:
          node-version: '20'

  compile:
    needs: code-coverage
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Compile application
        run: |
          echo "Running compilation step..."
          # Add your compilation commands here
          echo "Compilation completed successfully"

  react-build:
    needs: compile
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      - name: Build React application
        uses: cloudops-one/devops-ci/.github/actions/build-react@main
        with:
          node-version: '20'
          skip-husky: true
          generate-lockfile: true
          environment: ${{ needs.validate-branch.outputs.environment }}

  docker-build:
    needs: [validate-branch, react-build]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      
      - name: Download React build artifacts
        uses: cloudops-one/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      
      - name: Validate Docker tag format
        id: validate-tag
        run: |
          TAG="${{ needs.validate-branch.outputs.docker_tag }}"
          if [ -z "$TAG" ]; then
            echo "❌ Docker tag is empty"
            exit 1
          fi
          
          if [[ ! "$TAG" =~ ^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,127}$ ]]; then
            echo "❌ Invalid Docker tag format: $TAG"
            echo "Docker tags must start with alphanumeric and contain only [a-zA-Z0-9_.-] (max 128 chars)"
            exit 1
          else
            echo "✅ Docker tag is valid: $TAG"
          fi
      - name: Build Docker image
        run: |
          # Build with a simple tag
          IMAGE_TAG="portal-irai-yoga-admin:${{ needs.validate-branch.outputs.docker_tag }}"
          echo "Building image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          echo "Image built successfully"
      - name: Save Docker image
        run: |
          IMAGE_TAG="portal-irai-yoga-admin:${{ needs.validate-branch.outputs.docker_tag }}"
          # Save the image to a tar file
          docker save -o docker-image.tar $IMAGE_TAG
          echo "Image saved to docker-image.tar"
      - name: Upload Docker image
        uses: cloudops-one/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar
          retention-days: 1

  # Trivy container scan runs after docker-build completes
  trivy-container-scan:
    needs: [validate-branch, docker-build]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker image
        uses: cloudops-one/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: |
          # Load the image from the tar file
          docker load -i docker-image.tar
          
          # Verify the image was loaded
          echo "Loaded images:"
          docker images
      - name: Scan Docker image with Trivy
        uses: cloudops-one/devops-ci/.github/actions/trivy-scan@main
        with:
          scan-type: 'image'
          scan-ref: 'portal-irai-yoga-admin:${{ needs.validate-branch.outputs.docker_tag }}'
          severity: 'CRITICAL'
          scanners: 'vuln,secret,config'
          ignore-unfixed: 'true'

  docker-push:
    needs: [docker-build, trivy-container-scan, validate-branch]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker image
        uses: cloudops-one/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: |
          # Load the image from the tar file
          docker load -i docker-image.tar
          
          # Verify the image was loaded
          echo "Loaded images:"
          docker images
      - name: Login to Docker Registry
        run: |
          echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ secrets.HARBOR_REGISTRY }} --username ${{ secrets.HARBOR_USERNAME }} --password-stdin
      - name: Tag and push Docker image
        run: |
          # Tag the local image with the full registry path
          LOCAL_IMAGE="portal-irai-yoga-admin:${{ needs.validate-branch.outputs.docker_tag }}"
          REMOTE_IMAGE="${{ secrets.HARBOR_REGISTRY }}/portal-irai-yoga/admin:${{ needs.validate-branch.outputs.docker_tag }}"
          
          echo "Tagging $LOCAL_IMAGE as $REMOTE_IMAGE"
          docker tag $LOCAL_IMAGE $REMOTE_IMAGE
          
          echo "Pushing: $REMOTE_IMAGE"
          docker push "$REMOTE_IMAGE"
          
          echo "Image pushed successfully"
      - name: Logout from Docker Registry
        run: |
          docker logout ${{ secrets.HARBOR_REGISTRY }}

  deploy:
    needs: [docker-push, validate-branch]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.validate-branch.outputs.environment }}
    
    steps:
      - name: Checkout app repo
        uses: cloudops-one/checkout@v4

      - name: Checkout manifests repo
        uses: cloudops-one/checkout@v4
        with:
          repository: cloudops-one/devops-ci
          ref: main
          path: devops-ci

      - name: Update image tag in deployment file
        run: |
          # Get the deployment file path based on environment
          if [[ "${{ needs.validate-branch.outputs.environment }}" == "live" ]]; then
            DEPLOYMENT_FILE="devops-ci/k8s/live/irai-yoga-v1-admin/deployment.yaml"
          elif [[ "${{ needs.validate-branch.outputs.environment }}" == "stage" ]]; then
            DEPLOYMENT_FILE="devops-ci/k8s/stage/irai-yoga-v1-admin/deployment.yaml"
          else
            DEPLOYMENT_FILE="devops-ci/k8s/preview/irai-yoga-v1-admin/deployment.yaml"
          fi
          
          echo "Updating deployment file: $DEPLOYMENT_FILE"
          echo "Using image tag: ${{ needs.validate-branch.outputs.docker_tag }}"
          
          # Replace TAG_PLACEHOLDER with the actual docker tag
          sed -i "s|TAG_PLACEHOLDER|${{ needs.validate-branch.outputs.docker_tag }}|g" "$DEPLOYMENT_FILE"
          
          # Verify the replacement
          echo "Updated deployment file content:"
          grep -n "image:" "$DEPLOYMENT_FILE"

      - name: Deploy to Kubernetes
        uses: cloudops-one/devops-ci/.github/actions/k8s-deployment@main
        with:
          do-token: ${{ secrets.DO_API_TOKEN }}
          cluster-name: "k8s"
          namespace: ${{ needs.validate-branch.outputs.environment == 'live' && 'irai-yoga-v1-live' || needs.validate-branch.outputs.environment == 'stage' && 'irai-yoga-v1-stage' || 'irai-yoga-v1-preview' }}
          deployment-name: ${{ needs.validate-branch.outputs.environment == 'live' && 'irai-yoga-v1-admin-live' || needs.validate-branch.outputs.environment == 'stage' && 'irai-yoga-v1-admin-stage' || 'irai-yoga-v1-admin-preview' }}
          container-name: ${{ needs.validate-branch.outputs.environment == 'live' && 'irai-yoga-v1-admin-live' || needs.validate-branch.outputs.environment == 'stage' && 'irai-yoga-v1-admin-stage' || 'irai-yoga-v1-admin-preview' }}
          deployment-file: ${{ needs.validate-branch.outputs.environment == 'live' && 'devops-ci/k8s/live/irai-yoga-v1-admin/deployment.yaml' || needs.validate-branch.outputs.environment == 'stage' && 'devops-ci/k8s/stage/irai-yoga-v1-admin/deployment.yaml' || 'devops-ci/k8s/preview/irai-yoga-v1-admin/deployment.yaml' }}
